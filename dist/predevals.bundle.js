import*as e from"https://cdn.jsdelivr.net/npm/d3@7/+esm";var t={d:(e,a)=>{for(var s in a)t.o(a,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:a[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},a={};t.d(a,{A:()=>c});const s=(i={ascending:()=>e.ascending,descending:()=>e.descending,group:()=>e.group},l={},t.d(l,i),l);var i,l;function o(e){return"string"==typeof e?e.toLowerCase():e}const d=new Map([["model_id","Model"],["wis","WIS"],["wis_scaled_relative_skill","Rel. WIS"],["ae_median","MAE"],["ae_median_scaled_relative_skill","Rel. MAE"],["ae_point","MAE"],["ae_point_scaled_relative_skill","Rel. MAE"],["se_point","MSE"],["se_point_scaled_relative_skill","Rel. MSE"]]);function n(e){return new RegExp("^interval_coverage_").test(e)?`${e.slice(18)}% Cov.`:d.get(e)||e.toLowerCase().replace(/\b\w/g,(e=>e.toUpperCase()))}const r={_fetchData:null,state:{targets:[],eval_windows:[],task_id_text:{},selected_target:"",selected_disaggregate_by:"",selected_eval_window:"",sort_models_by:"model_id",sort_models_direction:1,xaxis_tickvals:[],scores:[]},getSelectedTargetObj(){return this.state.targets.filter((e=>e.target_id===this.state.selected_target))[0]},initialize(e,t,a){console.debug("initialize(): entered");const s=document.getElementById(e);if(null===s)throw`componentDiv DOM node not found: '${e}'`;return this._fetchData=t,this.state.targets=a.targets,this.state.eval_windows=a.eval_windows,this.state.task_id_text=a.task_id_text,this.state.selected_target=a.targets[0].target_id,this.state.selected_eval_window=a.eval_windows[0].window_name,this.state.selected_disaggregate_by="(None)",this.state.selected_metric=this.getSelectedTargetObj().metrics[0],function(e){function t(e,t){return $(`<div class="form-row mb-2">\n    <label for="${e}" class="col-sm-4 col-form-label pb-1">${t}:</label>\n    <div class="col-sm-8">\n        <select id="${e}" class="form-control"></select>\n    </div>\n</div>`)}const a=$('<div class="col-md-3 g-col-3 border-end p-4" id="predeval_options"></div>'),s=$("<form></form>");s.append(t("predeval_target","Target")),s.append(t("predeval_eval_window","Evaluation window")),s.append(t("predeval_disaggregate_by","Plot by")),s.append(t("predeval_metric","Plot metric")),a.append(s);const i=$('<div class="col-md-9 g-col-9" id="predeval_main"></div>');i.append($('<div id="predeval_plotly_div" style="width: 100%; height: 85vh; position: relative;"></div>')),e.empty().append(a,i)}($(s)),this.initializeUI(),this.addEventHandlers(),this.fetchDataUpdateDisplay(!0),null},initializeUI(){this.initializeTargetUI(),this.initializeDisaggregateByUI(),this.initializeEvalWindowUI(),this.initializeMetricUI(),$("#predeval_plotly_div").hide();const e=document.getElementById("predeval_plotly_div"),t=this.getPlotlyLayout();Plotly.newPlot(e,[],t,{modeBarButtonsToRemove:["lasso2d","autoScale2d"]})},initializeTargetUI(){const e=$("#predeval_target"),t=this.state;t.targets.forEach((function(a){const s=a.target_id,i=`<option value="${s}" ${s===t.selected_target?"selected":""} >${s}</option>`;e.append(i)}))},initializeDisaggregateByUI(){const e=$("#predeval_disaggregate_by"),t=this.state,a=this.getSelectedTargetObj(),s=["(None)"].concat(a.disaggregate_by);e.empty(),s.forEach((function(a){const s=`<option value="${a}" ${a===t.selected_disaggregate_by?"selected":""} >${a}</option>`;e.append(s)}))},initializeEvalWindowUI(){const e=$("#predeval_eval_window"),t=this.state;this.state.eval_windows.forEach((function(a){const s=a.window_name,i=`<option value="${s}" ${s===t.selected_eval_window?"selected":""} >${s}</option>`;e.append(i)}))},initializeDisplayTypeUI(){const e=$("#predeval_display_type"),t=this.state;["Line plot","Heatmap"].forEach((function(a){const s=`<option value="${a}" ${a===t.selected_display_type?"selected":""} >${a}</option>`;e.append(s)}))},initializeMetricUI(){const e=this.state,t=$("#predeval_metric"),a=this.getSelectedTargetObj();t.empty(),a.metrics.forEach((function(a){const s=`<option value="${a}" ${a===e.selected_metric?"selected":""} >${n(a)}</option>`;t.append(s)})),"(None)"===e.selected_disaggregate_by?t.prop("disabled",!0):t.prop("disabled",!1)},addEventHandlers(){$("#predeval_target").on("change",(function(){r.state.selected_target=this.value,r.initializeDisaggregateByUI(),r.initializeMetricUI(),r.fetchDataUpdateDisplay(!0)})),$("#predeval_disaggregate_by").on("change",(function(){r.state.selected_disaggregate_by=this.value,r.initializeMetricUI(),r.fetchDataUpdateDisplay(!0)})),$("#predeval_eval_window").on("change",(function(){r.state.selected_eval_window=this.value,r.fetchDataUpdateDisplay(!0)})),$("#predeval_metric").on("change",(function(){r.state.selected_metric=this.value,r.fetchDataUpdateDisplay(!1)}))},fetchDataUpdateDisplay(e){if(e){const t=[this.fetchScores()];console.debug(`fetchDataUpdateDisplay(${e}): waiting on promises`),Promise.all(t).then((t=>{console.debug(`fetchDataUpdateDisplay(${e}): Promise.all() done. updating display`,t),this.updateDisplay()}))}else console.debug(`fetchDataUpdateDisplay(${e}): updating display`),this.updateDisplay()},fetchScores(){return this.state.scores=[],this._fetchData(this.state.selected_target,this.state.selected_eval_window,this.state.selected_disaggregate_by).then((e=>{for(const t of e.columns)if(!["model_id","n",this.state.selected_disaggregate_by].includes(t))for(let a=0;a<e.length;a++)e[a][t]=parseFloat(e[a][t]);this.state.scores=e})).catch((e=>console.error(`fetchScores(): error: ${e.message}`)))},updateDisplay(){console.log("updateDisplay(): entered"),"(None)"===this.state.selected_disaggregate_by?this.updateTable():this.updatePlot()},updateTable(){$("#predeval_plotly_div").hide(),$("#predeval_table").remove();const e=this.state,t=$("#predeval_main"),a=$('<table id="predeval_table" class="table table-sm table-striped table-bordered"></table>'),i=$("<thead></thead>"),l=$("<tbody></tbody>"),d=$("<tr></tr>"),c=$("<th></th>"),p=$("<td></td>"),_=new RegExp("^interval_coverage_"),g=new RegExp("_scaled_relative_skill$"),h=this.state.sort_models_by;this.state.sort_models_direction>0?this.state.scores.sort(((e,t)=>s.ascending(o(e[h]),o(t[h])))):this.state.scores.sort(((e,t)=>s.descending(o(e[h]),o(t[h]))));const v=e.scores.columns;v.forEach((function(t){let a,s=t===e.sort_models_by,i=e.sort_models_direction;a=s?i>0?"bi bi-caret-up-fill":"bi bi-caret-down-fill":"bi bi-chevron-expand",d.append(c.clone().hover((function(){$(this).css("background-color","rgba(0,0,0,.075)").css("cursor","pointer"),$(this).find("i").addClass("text-primary")}),(function(){$(this).css("background-color","").css("cursor","default"),$(this).find("i").removeClass("text-primary")})).on("click",(function(){r.updateTableSorting(t)})).text(n(t)).prepend($(`<i class="bi ${a}" role="img" aria-label="Sort"></i>`)))})),i.append(d),a.append(i);for(let t=0;t<e.scores.length;t++){const a=$("<tr></tr>");for(let s=0;s<v.length;s++){const i=v[s];let l=e.scores[t][i];"model_id"!==i&&"n"!==i&&(_.test(i)&&(l*=100),l=g.test(i)?l.toFixed(2):l.toFixed(1)),a.append(p.clone().text(l))}l.append(a)}a.append(l),t.append(a)},updateTableSorting(e){this.state.sort_models_by===e?this.state.sort_models_direction*=-1:(this.state.sort_models_by=e,this.state.sort_models_direction=1),this.updateTable()},updatePlot(){$("#predeval_table").remove(),$("#predeval_plotly_div").show();const e=document.getElementById("predeval_plotly_div");this.setXaxisTickvals();const t=this.getPlotlyData();let a=this.getPlotlyLayout();0===t.length&&(a={title:{text:"No score data found."}}),Plotly.react(e,t,a)},setXaxisTickvals(){let e=this.state.scores.map((e=>e[this.state.selected_disaggregate_by]));if(Object.keys(this.state.task_id_text).includes(this.state.selected_disaggregate_by)){console.log("Disaggregating by task ID with text");const t=this.state.task_id_text[this.state.selected_disaggregate_by];e=e.map((e=>t[e]))}const t=[...new Set(e)].sort();this.state.xaxis_tickvals=t},getPlotlyLayout(){return 0===this.state.scores.length?{}:{autosize:!0,showlegend:!0,title:{text:`${n(this.state.selected_metric)} by ${this.state.selected_disaggregate_by}`,x:.5,y:.9,xanchor:"center",yanchor:"top"},xaxis:{title:{text:this.state.disaggregate_by},tickvals:this.state.xaxis_tickvals,ticktext:this.state.xaxis_tickvals,categoryorder:"array",categoryarray:this.state.xaxis_tickvals,fixedrange:!1},yaxis:{title:{text:n(this.state.selected_metric),hoverformat:".2f"},fixedrange:!1}}},getPlotlyData(){const e=this.state;let t=[];if(0!==e.scores.length){const a=s.group(e.scores,(e=>e.model_id));for(const[s,i]of a){let a=i.map((t=>t[e.selected_disaggregate_by]));if(Object.keys(e.task_id_text).includes(e.selected_disaggregate_by)){const t=e.task_id_text[e.selected_disaggregate_by];a=a.map((e=>t[e]))}const l=i.map((t=>t[e.selected_metric]));let o=a.map(((e,t)=>[e,l[t]]));o.sort(((t,a)=>e.xaxis_tickvals.indexOf(t[0])-e.xaxis_tickvals.indexOf(a[0])));const d={x:o.map((e=>e[0])),y:o.map((e=>e[1])),mode:"lines+markers",type:"scatter",name:s,hovermode:!1,opacity:.7};t.push(d)}}return t}},c=r;var p=a.A;export{p as default};